(function($){	var slideshow = (function(window) {		var ui = this;		var config;		var $slideshow;		var slideshowTimeout = null;		var reverseDirection = false;		var slideshowWidth;		var slideshowHeight;		var $currentSlide;		var $currentSlideClone;		var $currentNavItem;		var $slideHolder;		var $slidesARR;		var $navItems;		var $nextButton;		var $previousButton;		function init(options) {			$slideshow = $(this);			config = {				'type': 'slider',				'autoPlay': true,				'clickNext': true,				'fadeButtons': true,				'duration': 5000,				'nextButtonSelector': '.button_next',				'previousButtonSelector': '.button_previous',				'navButtonsAreChildren': true,				'startSlide': 0,				'loop': true			};			if (options) {				$.extend(config, options)			}			ui.config = config;			$slideshow.addClass('slideshow');			$slideHolder = $slideshow.children('.slideHolder');			$navItems = $('.slideshowNavItem');			$slidesARR = $slideHolder.children('.slide');			$slideshow.data('slidesARR', $slidesARR);			wireupPreviousAndNextButtons();			wireupSlideClickNext();			$currentSlide = $slidesARR[0];			wireupSlideshowHover();			resizeSlides();			resizeSlideHolder();			if (ui.config.autoPlay) {				resumeAutoplay(ui.config.duration);			}			if (config.startSlide !== 0) {				activateSlide($slideshow.data('slidesARR')[config.startSlide]);			}			runSlideAnimation($currentSlide);		}		function wireupPreviousAndNextButtons() {			if (ui.config.navButtonsAreChildren) {				$previousButton = $slideshow.find(ui.config.previousButtonSelector);				$nextButton = $slideshow.find(ui.config.nextButtonSelector);			} else {				$previousButton = $(ui.config.previousButtonSelector);				$nextButton = $(ui.config.nextButtonSelector);			}			$nextButton.click(function() {				stopSlideshow();				doNextSlide();			});			$previousButton.click(function(){				stopSlideshow();				doPreviousSlide();			});			if (ui.config.fadeButtons){				initializePreviousAndNextButtonFading();			}		}		function wireupSlideClickNext() {			$slideHolder.children('.slide').click(function() {				if (ui.config.clickNext) {					stopSlideshow();					doNextSlide();				}			});		}		function resizeSlides() {			slideshowWidth = $slideshow.width();			slideshowHeight = $slideshow.height();			$slideHolder.children('.slide').width(slideshowWidth);			$slideHolder.children('.slide').height(slideshowHeight);		}		function resizeSlideHolder() {			if (ui.config.type == 'slider') {				var slideHolderWidth = slideshowWidth * $slidesARR.length;				$slideHolder.width(slideHolderWidth);			} else if (ui.config.type == 'vertical') {				var slideHolderHeight = slideshowHeight * $slidesARR.length;				$slideHolder.height(slideHolderHeight);			} else if (ui.config.type ==' fader') {				$slideHolder.children('.slide').addClass('fader-slide');			}		}		function initializePreviousAndNextButtonFading() {			$previousButton.hover(				function(){$previousButton.stop().fadeTo('slow',0.5);},				function(){$previousButton.stop().fadeTo('slow',0.2);}			);			$nextButton.hover(				function(){$nextButton.stop().fadeTo('slow',0.5);},				function(){$nextButton.stop().fadeTo('slow',0.2);}			);		}		function wireupSlideshowHover() {			$slideshow.hover(				function() {					if(ui.config.fadeButtons) {						$previousButton.stop().fadeTo('slow',0.2);						$nextButton.stop().fadeTo('slow',0.2);					}					clearTimeout(slideshowTimeout);				},				function(){					if(ui.config.fadeButtons){						$previousButton.stop().fadeTo('slow',0.5);						$nextButton.stop().fadeTo('slow',0.5);					}					if(ui.config.autoPlay){ // continue playing slideshow						resumeAutoplay(1000);					}				}			);		}		function resumeAutoplay(duration) {			slideshowTimeout = setTimeout(function(){				doNextSlide();			}, duration);		}		function activateSlide(slide) {			if ($currentSlide != slide) { // for buttons/thumbs // TODO: is $currentSlide going to be okay?				$slideshow.find('.activeSlide').removeClass('activeSlide');				$(slide).addClass('activeSlide'); // TODO: does this need to be wrapped in $??				$navItems.removeClass('active');				// TODO: func activateNav()				if ($(slide).data('nav')) {					var id = $(slide).data('nav');					var $navItem = $('#' + id);					$navItem.addClass('active');					$currentNavItem = $navItem;				}				// TODO: func runResetFunction()				var resetFunction = $(slide).data('reset');				if (resetFunction) {					window[resetFunction]();				}				if (ui.config.type == 'slider') {					// remove clone if any					if ($currentSlideClone) {						$currentSlideClone.remove();					}					slideshowWidth = $slideshow.width(); // recalculate in case slideshow size changed					var newLeft;					if (($slidesARR.index(slide) == 0) && (!reverseDirection)) { // forward loop						$currentSlideClone = $(slide).clone();						$slideHolder.append($currentSlideClone);						newLeft = 0 - ($slideHolder.width() + slideshowWidth);					} else if (($slidesARR.index(slide) == $slidesARR.length - 1) && (reverseDirection)) { // reverse loop						$currentSlideClone = $(slide).clone();						$slideHolder.prepend($currentSlideClone);						$slideHolder.css('left', 0 - slideshowWidth);						newLeft = 0;					} else {						newLeft = 0 - ($slidesARR.index(slide) * slideshowWidth);					}					// handle slide					$slideHolder.stop().animate({left: newLeft}, 500, function(){						// run animation if it exists						runSlideAnimation(slide);						// handle forward loop						if (($slidesARR.index(slide) == 0) && (!reverseDirection)) {							$currentSlideClone.remove();							$slideHolder.css('left', '0px');						// handle reverse loop						} else if (($slidesARR.index(slide) == $slidesARR.length - 1) && (reverseDirection)) {							$currentSlideClone.remove();							$slideHolder.css('left', 0 - $slideHolder.width() + slideshowWidth);						}					});				} else if (config.type == 'vertical'){					var newTop;					if (($slidesARR.index(slide) == 0) && (!reverseDirection)) { // downward loop						$slideHolder.append(slide);						$slideHolder.css('padding-top', slideshowHeight);						newTop = 0 - $slideHolder.height();					} else if(($slidesARR.index(slide) == $slidesARR.length - 1) && (reverseDirection)) {						$slideHolder.prepend(slide);						$slideHolder.css('top', 0 - slideshowHeight);						newTop = 0;					} else {						newTop = 0 - ($slidesARR.index(slide) * slideshowHeight);					}					// handle slide					$slideHolder.stop().animate({top: newTop}, 500, function() {						if (($slidesARR.index(slide)==0) && (!reverseDirection)) { // upward loop							$slideHolder.prepend(slide);							$slideHolder.css('padding-top','0px');							$slideHolder.css('top','0px');						} else if (($slidesARR.index(slide) == $slidesARR.length - 1) && (reverseDirection)) {							$slideHolder.append(slide);							$slideHolder.css('top', 0 - $slideHolder.height() + slideshowHeight);						}					});				} else if(ui.config.type == 'fader') {					$(currentSlide).fadeOut(1000); // TODO: is this right?					$(slide).css('left', '0px');					$(slide).fadeIn(1000);				}				$currentSlide = slide; // TODO: $currentSlide should be currentSlide?				$slideshow.data('currentSlide', $currentSlide);			}		}		function doNextSlide() {			var nextIndex = $slidesARR.index($currentSlide) + 1;			if (nextIndex == $slidesARR.length){				nextIndex = 0;			}			var nextSlide = $slidesARR[nextIndex];			reverseDirection = false;			if ((nextIndex != 0) || ((nextIndex == 0) && (ui.config.loop))){				activateSlide(nextSlide);			}			if (ui.config.autoPlay) {				resumeAutoplay(ui.config.duration);			}		}		function doPreviousSlide() {			var previousIndex = $slidesARR.index($currentSlide) - 1;			if(previousIndex == -1){				previousIndex = $slidesARR.length - 1;			}			var previousSlide = $slidesARR[previousIndex];			reverseDirection = true;			if ((previousIndex != $slidesARR.length - 1) || ((previousIndex == $slidesARR.length - 1) && (ui.config.loop))) {				activateSlide(previousSlide);			}		}		function stopSlideshow() {			clearTimeout(slideshowTimeout);			ui.config.autoPlay = false;		}		var runSlideAnimation = function(slide) {			var animateFunction = $(slide).data('animate');			if (animateFunction) {				window[animateFunction]();			}		};		function recenterSlide(){			slideshowWidth = $slideshow.width(); // recalculate in case slideshow size changed			$slidesARR.width(slideshowWidth); // resize slides in case there are rounding errors			var newLeft = 0 - ($slidesARR.index($currentSlide) * slideshowWidth);			var slideHolderWidth = slideshowWidth * $slidesARR.length;			$slideHolder.width(slideHolderWidth);			$slideHolder.css('left', newLeft + 'px');		}		return {			init: init,			activate: function() {				$($(this).data('currentSlide')).fadeOut(1000);				$($(this).data('slidesARR')[0]).fadeIn();			},			moveToSlide: function(slideNumber){				activateSlide($(this).data('slidesARR')[slideNumber]);				stopSlideshow();			},			recenter: function() {				recenterSlide();			},			nextSlide: function() {				 doNextSlide();			},			previousSlide: function() {				doPreviousSlide();			}		}	})(window);	$.fn.slideshow = function(method){		if ( slideshow[method] ) {			return slideshow[method].apply(this, Array.prototype.slice.call( arguments, 1));		} else if ( typeof method === 'object' || !method ) {			return slideshow.init.apply( this, arguments );		} else {			$.error('Method ' +  method + ' does not exist on slideshow');		}	};})( jQuery );